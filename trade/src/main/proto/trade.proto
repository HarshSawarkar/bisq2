/*
 * This file is part of Bisq.
 *
 * Bisq is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 *
 * Bisq is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Bisq. If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package trade;

import "common.proto";
import "contract.proto";
import "identity.proto";
import "network_identity.proto";
import "offer.proto";
import "rpc.proto";

option java_package = "bisq.trade.protobuf";
option java_multiple_files = true;

message TradeParty {
  network.identity.NetworkId networkId = 1;
  optional contract.ContractSignatureData contractSignatureData = 2;
  oneof message {
    BisqEasyTradeParty bisqEasyTradeParty = 20;
    MuSigTradeParty muSigTradeParty = 21;
  }
}

enum TradeRole{
  TRADEROLE_UNSPECIFIED = 0;
  TRADEROLE_BUYER_AS_TAKER = 1;
  TRADEROLE_BUYER_AS_MAKER = 2;
  TRADEROLE_SELLER_AS_TAKER = 3;
  TRADEROLE_SELLER_AS_MAKER = 4;
}

enum TradeLifecycleState {
  TRADELIFECYCLESTATE_UNSPECIFIED = 0;
  TRADELIFECYCLESTATE_ACTIVE = 1;
  TRADELIFECYCLESTATE_HISTORICAL = 2;
  TRADELIFECYCLESTATE_FAILED = 3;
}

message Trade {
  string state = 1;
  string id = 2;
  TradeRole tradeRole = 3;
  identity.Identity myIdentity = 4;
  contract.Contract contract = 5;
  TradeParty taker = 6;
  TradeParty maker = 7;
  optional string errorMessage = 8;
  optional string errorStackTrace = 9;
  optional string peersErrorMessage = 10;
  optional string peersErrorStackTrace = 11;
  TradeLifecycleState lifecycleState = 12;

  oneof message {
    BisqEasyTrade bisqEasyTrade = 30;
    MuSigTrade muSigTrade = 31;
  }
}
message TradeMessage {
  string id = 1;
  string tradeId = 2;
  string protocolVersion = 3;
  network.identity.NetworkId sender = 4;
  network.identity.NetworkId receiver = 5;
  oneof message {
    BisqEasyTradeMessage bisqEasyTradeMessage = 20;
    MuSigTradeMessage muSigTradeMessage = 21;
  }
}

// BisqEasy
message BisqEasyTradeParty {
}

message BisqEasyTrade {
  optional string paymentAccountData = 1;
  optional string bitcoinPaymentData = 2;
  optional string paymentProof = 3;
  optional contract.Role interruptTradeInitiator = 4;
  optional sint64 tradeCompletedDate = 5;
}

message BisqEasyTradeStore {
  repeated Trade trades = 1;
  repeated string tradeIds = 2;
}

// BisqEasy messages
message BisqEasyTradeMessage {
  oneof message {
    BisqEasyTakeOfferRequest bisqEasyTakeOfferRequest = 20;
    BisqEasyTakeOfferResponse bisqEasyTakeOfferResponse = 21;
    BisqEasyAccountDataMessage bisqEasyAccountDataMessage = 22;
    BisqEasyConfirmFiatSentMessage bisqEasyConfirmFiatSentMessage = 23;
    BisqEasyBtcAddressMessage bisqEasyBtcAddressMessage = 24;
    BisqEasyConfirmFiatReceiptMessage bisqEasyConfirmFiatReceiptMessage = 25;
    BisqEasyConfirmBtcSentMessage bisqEasyConfirmBtcSentMessage = 26;
    BisqEasyRejectTradeMessage bisqEasyRejectTradeMessage = 27;
    BisqEasyCancelTradeMessage bisqEasyCancelTradeMessage = 28;
    BisqEasyReportErrorMessage bisqEasyReportErrorMessage = 29;
  }
}
message BisqEasyTakeOfferRequest {
  contract.Contract bisqEasyContract = 1;
  contract.ContractSignatureData contractSignatureData = 2;
}
message BisqEasyTakeOfferResponse {
  contract.ContractSignatureData contractSignatureData = 1;
}
message BisqEasyAccountDataMessage {
  string paymentAccountData = 1;
  offer.Offer bisqEasyOffer = 2;
}
message BisqEasyConfirmFiatSentMessage {
}
message BisqEasyBtcAddressMessage {
  string bitcoinPaymentData = 1;
  offer.Offer bisqEasyOffer = 2;
}
message BisqEasyConfirmFiatReceiptMessage {
}
message BisqEasyConfirmBtcSentMessage {
  optional string paymentProof = 1;
}
message BisqEasyRejectTradeMessage {
}
message BisqEasyCancelTradeMessage {
}
message BisqEasyReportErrorMessage {
  string errorMessage = 1;
  string stackTrace = 2;
}


// MuSig

// Value objects for network messages (based on grpc messages)
message PubKeyShares {
  bytes buyerOutputPubKeyShare = 1;
  bytes sellerOutputPubKeyShare = 2;
}

message NonceShares {
  string warningTxFeeBumpAddress = 1;
  string redirectTxFeeBumpAddress = 2;
  bytes halfDepositPsbt = 3;
  bytes swapTxInputNonceShare = 4;
  bytes buyersWarningTxBuyerInputNonceShare = 5;
  bytes buyersWarningTxSellerInputNonceShare = 6;
  bytes sellersWarningTxBuyerInputNonceShare = 7;
  bytes sellersWarningTxSellerInputNonceShare = 8;
  bytes buyersRedirectTxInputNonceShare = 9;
  bytes sellersRedirectTxInputNonceShare = 10;
}

message PartialSignatures {
  bytes peersWarningTxBuyerInputPartialSignature = 1;
  bytes peersWarningTxSellerInputPartialSignature = 2;
  bytes peersRedirectTxInputPartialSignature = 3;
  optional bytes swapTxInputPartialSignature = 4;
}

message RedactedPartialSignatures {
  bytes peersWarningTxBuyerInputPartialSignature = 1;
  bytes peersWarningTxSellerInputPartialSignature = 2;
  bytes peersRedirectTxInputPartialSignature = 3;
}


message SwapTxSignature {
  bytes swapTx = 1;
  bytes peerOutputPrvKeyShare = 2;
}

// Trade domain
message MuSigTradeParty {
  optional musigrpc.PubKeySharesResponse myPubKeySharesResponse = 1;
  optional PubKeyShares peersPubKeyShares = 2;
  optional musigrpc.NonceSharesMessage myNonceSharesMessage = 3;
  optional  NonceShares peersNonceShares = 4;
  optional musigrpc.PartialSignaturesMessage myPartialSignaturesMessage = 5;
  optional PartialSignatures peersPartialSignatures = 6;
  optional RedactedPartialSignatures peersRedactedPartialSignatures = 7;
  optional musigrpc.DepositPsbt myDepositPsbt = 8;
  optional musigrpc.SwapTxSignatureResponse mySwapTxSignatureResponse = 9;
  optional SwapTxSignature peersSwapTxSignature = 10;
  optional musigrpc.CloseTradeResponse myCloseTradeResponse = 11;
  optional common.ByteArray peersOutputPrvKeyShare = 12;
}

message MuSigTrade {
  optional string depositTxId = 1;
  optional string paymentAccountData = 2;
  optional sint64 tradeCompletedDate = 3;
}

message MuSigTradeStore {
  map<string, Trade> tradeById = 1;
}

// MuSig network messages
message MuSigTradeMessage {
  oneof message {
    MuSigSetupTradeMessage_A muSigSetupTradeMessage_A = 20;
    MuSigSetupTradeMessage_B muSigSetupTradeMessage_B = 21;
    MuSigSetupTradeMessage_C muSigSetupTradeMessage_C = 22;
    MuSigSetupTradeMessage_D muSigSetupTradeMessage_D = 23;
    MuSigPaymentInitiatedMessage_E muSigPaymentInitiatedMessage_E = 24;
    MuSigPaymentReceivedMessage_F muSigPaymentReceivedMessage_F = 25;
    MuSigCooperativeClosureMessage_G muSigCooperativeClosureMessage_G = 26;
    MuSigReportErrorMessage muSigReportErrorMessage = 27;
  }
}

message MuSigReportErrorMessage {
  string errorMessage = 1;
  string stackTrace = 2;
}

message MuSigSetupTradeMessage_A {
  contract.Contract contract = 1;
  contract.ContractSignatureData contractSignatureData = 2;
  PubKeyShares pubKeyShares = 3;
}

message MuSigSetupTradeMessage_B {
  contract.Contract contract = 1;
  contract.ContractSignatureData contractSignatureData = 2;
  PubKeyShares pubKeyShares = 3;
  NonceShares nonceShares = 4;
}

message MuSigSetupTradeMessage_C {
  NonceShares nonceShares = 1;
  RedactedPartialSignatures redactedPartialSignatures = 2;
}

message MuSigSetupTradeMessage_D {
  PartialSignatures partialSignatures = 1;
}

message MuSigPaymentInitiatedMessage_E {
  bytes swapTxInputPartialSignature = 1;
}

message MuSigPaymentReceivedMessage_F {
  SwapTxSignature swapTxSignature = 1;
}

message MuSigCooperativeClosureMessage_G {
  common.ByteArray peerOutputPrvKeyShare = 1;
}
